// Code generated by protoc-gen-gogo.
// source: raft_cmdpb.proto
// DO NOT EDIT!

/*
	Package raft_cmdpb is a generated protocol buffer package.

	It is generated from these files:
		raft_cmdpb.proto

	It has these top-level messages:
		KvPair
		MVCCKVPair
		Request
		Response
		SplitRequest
		SplitResponse
		MergeRequest
		MergeResponse
		DestroyRequest
		DestroyResponse
		AdminRequest
		AdminResponse
		RaftCmdRequest
		RaftCmdResponse
*/
package raft_cmdpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	metapb "model/pkg/metapb"

	kvrpcpb "model/pkg/kvrpcpb"

	timestamp "model/pkg/timestamp"

	errorpb "model/pkg/errorpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CmdType int32

const (
	CmdType_Invalid     CmdType = 0
	CmdType_RawGet      CmdType = 1
	CmdType_RawPut      CmdType = 2
	CmdType_RawDelete   CmdType = 3
	CmdType_RawExecute  CmdType = 4
	CmdType_Select      CmdType = 7
	CmdType_Insert      CmdType = 8
	CmdType_Delete      CmdType = 9
	CmdType_Update      CmdType = 10
	CmdType_Replace     CmdType = 11
	CmdType_BatchInsert CmdType = 12
)

var CmdType_name = map[int32]string{
	0:  "Invalid",
	1:  "RawGet",
	2:  "RawPut",
	3:  "RawDelete",
	4:  "RawExecute",
	7:  "Select",
	8:  "Insert",
	9:  "Delete",
	10: "Update",
	11: "Replace",
	12: "BatchInsert",
}
var CmdType_value = map[string]int32{
	"Invalid":     0,
	"RawGet":      1,
	"RawPut":      2,
	"RawDelete":   3,
	"RawExecute":  4,
	"Select":      7,
	"Insert":      8,
	"Delete":      9,
	"Update":      10,
	"Replace":     11,
	"BatchInsert": 12,
}

func (x CmdType) String() string {
	return proto.EnumName(CmdType_name, int32(x))
}
func (CmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{0} }

type AdminCmdType int32

const (
	AdminCmdType_InvalidAdmin AdminCmdType = 0
	AdminCmdType_Split        AdminCmdType = 1
	AdminCmdType_Merge        AdminCmdType = 2
)

var AdminCmdType_name = map[int32]string{
	0: "InvalidAdmin",
	1: "Split",
	2: "Merge",
}
var AdminCmdType_value = map[string]int32{
	"InvalidAdmin": 0,
	"Split":        1,
	"Merge":        2,
}

func (x AdminCmdType) String() string {
	return proto.EnumName(AdminCmdType_name, int32(x))
}
func (AdminCmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{1} }

type MessageType int32

const (
	MessageType_InvalidMessage MessageType = 0
	MessageType_Data           MessageType = 1
	MessageType_Admin          MessageType = 2
)

var MessageType_name = map[int32]string{
	0: "InvalidMessage",
	1: "Data",
	2: "Admin",
}
var MessageType_value = map[string]int32{
	"InvalidMessage": 0,
	"Data":           1,
	"Admin":          2,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{2} }

type KvPair struct {
	Key        []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value      []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp  uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ApplyIndex uint64 `protobuf:"varint,4,opt,name=applyIndex,proto3" json:"applyIndex,omitempty"`
}

func (m *KvPair) Reset()                    { *m = KvPair{} }
func (m *KvPair) String() string            { return proto.CompactTextString(m) }
func (*KvPair) ProtoMessage()               {}
func (*KvPair) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{0} }

func (m *KvPair) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KvPair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KvPair) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *KvPair) GetApplyIndex() uint64 {
	if m != nil {
		return m.ApplyIndex
	}
	return 0
}

type MVCCKVPair struct {
	Key        []byte              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	IsDelete   bool                `protobuf:"varint,2,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	Value      []byte              `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp  timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp"`
	ApplyIndex uint64              `protobuf:"varint,5,opt,name=applyIndex,proto3" json:"applyIndex,omitempty"`
	ExpireAt   int64               `protobuf:"varint,6,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (m *MVCCKVPair) Reset()                    { *m = MVCCKVPair{} }
func (m *MVCCKVPair) String() string            { return proto.CompactTextString(m) }
func (*MVCCKVPair) ProtoMessage()               {}
func (*MVCCKVPair) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{1} }

func (m *MVCCKVPair) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MVCCKVPair) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

func (m *MVCCKVPair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MVCCKVPair) GetTimestamp() timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return timestamp.Timestamp{}
}

func (m *MVCCKVPair) GetApplyIndex() uint64 {
	if m != nil {
		return m.ApplyIndex
	}
	return 0
}

func (m *MVCCKVPair) GetExpireAt() int64 {
	if m != nil {
		return m.ExpireAt
	}
	return 0
}

type Request struct {
	RangeEpoch       *metapb.RangeEpoch            `protobuf:"bytes,1,opt,name=range_epoch,json=rangeEpoch" json:"range_epoch,omitempty"`
	CmdType          CmdType                       `protobuf:"varint,2,opt,name=cmd_type,json=cmdType,proto3,enum=raft_cmdpb.CmdType" json:"cmd_type,omitempty"`
	KvRawGetReq      *kvrpcpb.KvRawGetRequest      `protobuf:"bytes,3,opt,name=kv_raw_get_req,json=kvRawGetReq" json:"kv_raw_get_req,omitempty"`
	KvRawPutReq      *kvrpcpb.KvRawPutRequest      `protobuf:"bytes,4,opt,name=kv_raw_put_req,json=kvRawPutReq" json:"kv_raw_put_req,omitempty"`
	KvRawDeleteReq   *kvrpcpb.KvRawDeleteRequest   `protobuf:"bytes,5,opt,name=kv_raw_delete_req,json=kvRawDeleteReq" json:"kv_raw_delete_req,omitempty"`
	KvRawExecuteReq  *kvrpcpb.KvRawExecuteRequest  `protobuf:"bytes,6,opt,name=kv_raw_execute_req,json=kvRawExecuteReq" json:"kv_raw_execute_req,omitempty"`
	KvSelectReq      *kvrpcpb.KvSelectRequest      `protobuf:"bytes,8,opt,name=kv_select_req,json=kvSelectReq" json:"kv_select_req,omitempty"`
	KvInsertReq      *kvrpcpb.KvInsertRequest      `protobuf:"bytes,9,opt,name=kv_insert_req,json=kvInsertReq" json:"kv_insert_req,omitempty"`
	KvDeleteReq      *kvrpcpb.KvDeleteRequest      `protobuf:"bytes,10,opt,name=kv_delete_req,json=kvDeleteReq" json:"kv_delete_req,omitempty"`
	KvUpdateReq      *kvrpcpb.KvUpdateRequest      `protobuf:"bytes,11,opt,name=kv_update_req,json=kvUpdateReq" json:"kv_update_req,omitempty"`
	KvReplaceReq     *kvrpcpb.KvReplaceRequest     `protobuf:"bytes,12,opt,name=kv_replace_req,json=kvReplaceReq" json:"kv_replace_req,omitempty"`
	KvBatchInsertReq *kvrpcpb.KvBatchInsertRequest `protobuf:"bytes,13,opt,name=kv_batch_insert_req,json=kvBatchInsertReq" json:"kv_batch_insert_req,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{2} }

func (m *Request) GetRangeEpoch() *metapb.RangeEpoch {
	if m != nil {
		return m.RangeEpoch
	}
	return nil
}

func (m *Request) GetCmdType() CmdType {
	if m != nil {
		return m.CmdType
	}
	return CmdType_Invalid
}

func (m *Request) GetKvRawGetReq() *kvrpcpb.KvRawGetRequest {
	if m != nil {
		return m.KvRawGetReq
	}
	return nil
}

func (m *Request) GetKvRawPutReq() *kvrpcpb.KvRawPutRequest {
	if m != nil {
		return m.KvRawPutReq
	}
	return nil
}

func (m *Request) GetKvRawDeleteReq() *kvrpcpb.KvRawDeleteRequest {
	if m != nil {
		return m.KvRawDeleteReq
	}
	return nil
}

func (m *Request) GetKvRawExecuteReq() *kvrpcpb.KvRawExecuteRequest {
	if m != nil {
		return m.KvRawExecuteReq
	}
	return nil
}

func (m *Request) GetKvSelectReq() *kvrpcpb.KvSelectRequest {
	if m != nil {
		return m.KvSelectReq
	}
	return nil
}

func (m *Request) GetKvInsertReq() *kvrpcpb.KvInsertRequest {
	if m != nil {
		return m.KvInsertReq
	}
	return nil
}

func (m *Request) GetKvDeleteReq() *kvrpcpb.KvDeleteRequest {
	if m != nil {
		return m.KvDeleteReq
	}
	return nil
}

func (m *Request) GetKvUpdateReq() *kvrpcpb.KvUpdateRequest {
	if m != nil {
		return m.KvUpdateReq
	}
	return nil
}

func (m *Request) GetKvReplaceReq() *kvrpcpb.KvReplaceRequest {
	if m != nil {
		return m.KvReplaceReq
	}
	return nil
}

func (m *Request) GetKvBatchInsertReq() *kvrpcpb.KvBatchInsertRequest {
	if m != nil {
		return m.KvBatchInsertReq
	}
	return nil
}

type Response struct {
	CmdType           CmdType                        `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=raft_cmdpb.CmdType" json:"cmd_type,omitempty"`
	KvRawGetResp      *kvrpcpb.KvRawGetResponse      `protobuf:"bytes,2,opt,name=kv_raw_get_resp,json=kvRawGetResp" json:"kv_raw_get_resp,omitempty"`
	KvRawPutResp      *kvrpcpb.KvRawPutResponse      `protobuf:"bytes,3,opt,name=kv_raw_put_resp,json=kvRawPutResp" json:"kv_raw_put_resp,omitempty"`
	KvRawDeleteResp   *kvrpcpb.KvRawDeleteResponse   `protobuf:"bytes,4,opt,name=kv_raw_delete_resp,json=kvRawDeleteResp" json:"kv_raw_delete_resp,omitempty"`
	KvRawExecuteResp  *kvrpcpb.KvRawExecuteResponse  `protobuf:"bytes,5,opt,name=kv_raw_execute_resp,json=kvRawExecuteResp" json:"kv_raw_execute_resp,omitempty"`
	KvSelectResp      *kvrpcpb.KvSelectResponse      `protobuf:"bytes,8,opt,name=kv_select_resp,json=kvSelectResp" json:"kv_select_resp,omitempty"`
	KvInsertResp      *kvrpcpb.KvInsertResponse      `protobuf:"bytes,9,opt,name=kv_insert_resp,json=kvInsertResp" json:"kv_insert_resp,omitempty"`
	KvDeleteResp      *kvrpcpb.KvDeleteResponse      `protobuf:"bytes,10,opt,name=kv_delete_resp,json=kvDeleteResp" json:"kv_delete_resp,omitempty"`
	KvUpdateResp      *kvrpcpb.KvUpdateResponse      `protobuf:"bytes,11,opt,name=kv_update_resp,json=kvUpdateResp" json:"kv_update_resp,omitempty"`
	KvReplaceResp     *kvrpcpb.KvReplaceResponse     `protobuf:"bytes,12,opt,name=kv_replace_resp,json=kvReplaceResp" json:"kv_replace_resp,omitempty"`
	KvBatchInsertResp *kvrpcpb.KvBatchInsertResponse `protobuf:"bytes,13,opt,name=kv_batch_insert_resp,json=kvBatchInsertResp" json:"kv_batch_insert_resp,omitempty"`
	Error             *errorpb.Error                 `protobuf:"bytes,15,opt,name=error" json:"error,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{3} }

func (m *Response) GetCmdType() CmdType {
	if m != nil {
		return m.CmdType
	}
	return CmdType_Invalid
}

func (m *Response) GetKvRawGetResp() *kvrpcpb.KvRawGetResponse {
	if m != nil {
		return m.KvRawGetResp
	}
	return nil
}

func (m *Response) GetKvRawPutResp() *kvrpcpb.KvRawPutResponse {
	if m != nil {
		return m.KvRawPutResp
	}
	return nil
}

func (m *Response) GetKvRawDeleteResp() *kvrpcpb.KvRawDeleteResponse {
	if m != nil {
		return m.KvRawDeleteResp
	}
	return nil
}

func (m *Response) GetKvRawExecuteResp() *kvrpcpb.KvRawExecuteResponse {
	if m != nil {
		return m.KvRawExecuteResp
	}
	return nil
}

func (m *Response) GetKvSelectResp() *kvrpcpb.KvSelectResponse {
	if m != nil {
		return m.KvSelectResp
	}
	return nil
}

func (m *Response) GetKvInsertResp() *kvrpcpb.KvInsertResponse {
	if m != nil {
		return m.KvInsertResp
	}
	return nil
}

func (m *Response) GetKvDeleteResp() *kvrpcpb.KvDeleteResponse {
	if m != nil {
		return m.KvDeleteResp
	}
	return nil
}

func (m *Response) GetKvUpdateResp() *kvrpcpb.KvUpdateResponse {
	if m != nil {
		return m.KvUpdateResp
	}
	return nil
}

func (m *Response) GetKvReplaceResp() *kvrpcpb.KvReplaceResponse {
	if m != nil {
		return m.KvReplaceResp
	}
	return nil
}

func (m *Response) GetKvBatchInsertResp() *kvrpcpb.KvBatchInsertResponse {
	if m != nil {
		return m.KvBatchInsertResp
	}
	return nil
}

func (m *Response) GetError() *errorpb.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type SplitRequest struct {
	SchId        uint64 `protobuf:"varint,1,opt,name=sch_id,json=schId,proto3" json:"sch_id,omitempty"`
	SplitKey     []byte `protobuf:"bytes,2,opt,name=split_key,json=splitKey,proto3" json:"split_key,omitempty"`
	LeftRangeId  uint64 `protobuf:"varint,3,opt,name=left_range_id,json=leftRangeId,proto3" json:"left_range_id,omitempty"`
	RightRangeId uint64 `protobuf:"varint,4,opt,name=right_range_id,json=rightRangeId,proto3" json:"right_range_id,omitempty"`
}

func (m *SplitRequest) Reset()                    { *m = SplitRequest{} }
func (m *SplitRequest) String() string            { return proto.CompactTextString(m) }
func (*SplitRequest) ProtoMessage()               {}
func (*SplitRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{4} }

func (m *SplitRequest) GetSchId() uint64 {
	if m != nil {
		return m.SchId
	}
	return 0
}

func (m *SplitRequest) GetSplitKey() []byte {
	if m != nil {
		return m.SplitKey
	}
	return nil
}

func (m *SplitRequest) GetLeftRangeId() uint64 {
	if m != nil {
		return m.LeftRangeId
	}
	return 0
}

func (m *SplitRequest) GetRightRangeId() uint64 {
	if m != nil {
		return m.RightRangeId
	}
	return 0
}

type SplitResponse struct {
	LeftRange  *metapb.Range `protobuf:"bytes,1,opt,name=left_range,json=leftRange" json:"left_range,omitempty"`
	RightRange *metapb.Range `protobuf:"bytes,2,opt,name=right_range,json=rightRange" json:"right_range,omitempty"`
}

func (m *SplitResponse) Reset()                    { *m = SplitResponse{} }
func (m *SplitResponse) String() string            { return proto.CompactTextString(m) }
func (*SplitResponse) ProtoMessage()               {}
func (*SplitResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{5} }

func (m *SplitResponse) GetLeftRange() *metapb.Range {
	if m != nil {
		return m.LeftRange
	}
	return nil
}

func (m *SplitResponse) GetRightRange() *metapb.Range {
	if m != nil {
		return m.RightRange
	}
	return nil
}

type MergeRequest struct {
}

func (m *MergeRequest) Reset()                    { *m = MergeRequest{} }
func (m *MergeRequest) String() string            { return proto.CompactTextString(m) }
func (*MergeRequest) ProtoMessage()               {}
func (*MergeRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{6} }

type MergeResponse struct {
}

func (m *MergeResponse) Reset()                    { *m = MergeResponse{} }
func (m *MergeResponse) String() string            { return proto.CompactTextString(m) }
func (*MergeResponse) ProtoMessage()               {}
func (*MergeResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{7} }

type DestroyRequest struct {
	SchId uint64 `protobuf:"varint,1,opt,name=sch_id,json=schId,proto3" json:"sch_id,omitempty"`
}

func (m *DestroyRequest) Reset()                    { *m = DestroyRequest{} }
func (m *DestroyRequest) String() string            { return proto.CompactTextString(m) }
func (*DestroyRequest) ProtoMessage()               {}
func (*DestroyRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{8} }

func (m *DestroyRequest) GetSchId() uint64 {
	if m != nil {
		return m.SchId
	}
	return 0
}

type DestroyResponse struct {
}

func (m *DestroyResponse) Reset()                    { *m = DestroyResponse{} }
func (m *DestroyResponse) String() string            { return proto.CompactTextString(m) }
func (*DestroyResponse) ProtoMessage()               {}
func (*DestroyResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{9} }

type AdminRequest struct {
	CmdType  AdminCmdType  `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=raft_cmdpb.AdminCmdType" json:"cmd_type,omitempty"`
	SplitReq *SplitRequest `protobuf:"bytes,2,opt,name=split_req,json=splitReq" json:"split_req,omitempty"`
	MergeReq *MergeRequest `protobuf:"bytes,3,opt,name=merge_req,json=mergeReq" json:"merge_req,omitempty"`
}

func (m *AdminRequest) Reset()                    { *m = AdminRequest{} }
func (m *AdminRequest) String() string            { return proto.CompactTextString(m) }
func (*AdminRequest) ProtoMessage()               {}
func (*AdminRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{10} }

func (m *AdminRequest) GetCmdType() AdminCmdType {
	if m != nil {
		return m.CmdType
	}
	return AdminCmdType_InvalidAdmin
}

func (m *AdminRequest) GetSplitReq() *SplitRequest {
	if m != nil {
		return m.SplitReq
	}
	return nil
}

func (m *AdminRequest) GetMergeReq() *MergeRequest {
	if m != nil {
		return m.MergeReq
	}
	return nil
}

type AdminResponse struct {
	CmdType   AdminCmdType   `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=raft_cmdpb.AdminCmdType" json:"cmd_type,omitempty"`
	SplitResp *SplitResponse `protobuf:"bytes,2,opt,name=split_resp,json=splitResp" json:"split_resp,omitempty"`
	MergeResp *MergeResponse `protobuf:"bytes,3,opt,name=merge_resp,json=mergeResp" json:"merge_resp,omitempty"`
}

func (m *AdminResponse) Reset()                    { *m = AdminResponse{} }
func (m *AdminResponse) String() string            { return proto.CompactTextString(m) }
func (*AdminResponse) ProtoMessage()               {}
func (*AdminResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{11} }

func (m *AdminResponse) GetCmdType() AdminCmdType {
	if m != nil {
		return m.CmdType
	}
	return AdminCmdType_InvalidAdmin
}

func (m *AdminResponse) GetSplitResp() *SplitResponse {
	if m != nil {
		return m.SplitResp
	}
	return nil
}

func (m *AdminResponse) GetMergeResp() *MergeResponse {
	if m != nil {
		return m.MergeResp
	}
	return nil
}

type RaftCmdRequest struct {
	Type         MessageType   `protobuf:"varint,1,opt,name=type,proto3,enum=raft_cmdpb.MessageType" json:"type,omitempty"`
	Request      *Request      `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	AdminRequest *AdminRequest `protobuf:"bytes,3,opt,name=admin_request,json=adminRequest" json:"admin_request,omitempty"`
}

func (m *RaftCmdRequest) Reset()                    { *m = RaftCmdRequest{} }
func (m *RaftCmdRequest) String() string            { return proto.CompactTextString(m) }
func (*RaftCmdRequest) ProtoMessage()               {}
func (*RaftCmdRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{12} }

func (m *RaftCmdRequest) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_InvalidMessage
}

func (m *RaftCmdRequest) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RaftCmdRequest) GetAdminRequest() *AdminRequest {
	if m != nil {
		return m.AdminRequest
	}
	return nil
}

type RaftCmdResponse struct {
	Type          MessageType    `protobuf:"varint,1,opt,name=type,proto3,enum=raft_cmdpb.MessageType" json:"type,omitempty"`
	Response      *Response      `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
	AdminResponse *AdminResponse `protobuf:"bytes,3,opt,name=admin_response,json=adminResponse" json:"admin_response,omitempty"`
}

func (m *RaftCmdResponse) Reset()                    { *m = RaftCmdResponse{} }
func (m *RaftCmdResponse) String() string            { return proto.CompactTextString(m) }
func (*RaftCmdResponse) ProtoMessage()               {}
func (*RaftCmdResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{13} }

func (m *RaftCmdResponse) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_InvalidMessage
}

func (m *RaftCmdResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RaftCmdResponse) GetAdminResponse() *AdminResponse {
	if m != nil {
		return m.AdminResponse
	}
	return nil
}

func init() {
	proto.RegisterType((*KvPair)(nil), "raft_cmdpb.KvPair")
	proto.RegisterType((*MVCCKVPair)(nil), "raft_cmdpb.MVCCKVPair")
	proto.RegisterType((*Request)(nil), "raft_cmdpb.Request")
	proto.RegisterType((*Response)(nil), "raft_cmdpb.Response")
	proto.RegisterType((*SplitRequest)(nil), "raft_cmdpb.SplitRequest")
	proto.RegisterType((*SplitResponse)(nil), "raft_cmdpb.SplitResponse")
	proto.RegisterType((*MergeRequest)(nil), "raft_cmdpb.MergeRequest")
	proto.RegisterType((*MergeResponse)(nil), "raft_cmdpb.MergeResponse")
	proto.RegisterType((*DestroyRequest)(nil), "raft_cmdpb.DestroyRequest")
	proto.RegisterType((*DestroyResponse)(nil), "raft_cmdpb.DestroyResponse")
	proto.RegisterType((*AdminRequest)(nil), "raft_cmdpb.AdminRequest")
	proto.RegisterType((*AdminResponse)(nil), "raft_cmdpb.AdminResponse")
	proto.RegisterType((*RaftCmdRequest)(nil), "raft_cmdpb.RaftCmdRequest")
	proto.RegisterType((*RaftCmdResponse)(nil), "raft_cmdpb.RaftCmdResponse")
	proto.RegisterEnum("raft_cmdpb.CmdType", CmdType_name, CmdType_value)
	proto.RegisterEnum("raft_cmdpb.AdminCmdType", AdminCmdType_name, AdminCmdType_value)
	proto.RegisterEnum("raft_cmdpb.MessageType", MessageType_name, MessageType_value)
}
func (m *KvPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvPair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.Timestamp))
	}
	if m.ApplyIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.ApplyIndex))
	}
	return i, nil
}

func (m *MVCCKVPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MVCCKVPair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.IsDelete {
		dAtA[i] = 0x10
		i++
		if m.IsDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.Timestamp.Size()))
	n1, err := m.Timestamp.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.ApplyIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.ApplyIndex))
	}
	if m.ExpireAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.ExpireAt))
	}
	return i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeEpoch != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.RangeEpoch.Size()))
		n2, err := m.RangeEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.CmdType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.CmdType))
	}
	if m.KvRawGetReq != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvRawGetReq.Size()))
		n3, err := m.KvRawGetReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.KvRawPutReq != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvRawPutReq.Size()))
		n4, err := m.KvRawPutReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.KvRawDeleteReq != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvRawDeleteReq.Size()))
		n5, err := m.KvRawDeleteReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.KvRawExecuteReq != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvRawExecuteReq.Size()))
		n6, err := m.KvRawExecuteReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.KvSelectReq != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvSelectReq.Size()))
		n7, err := m.KvSelectReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.KvInsertReq != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvInsertReq.Size()))
		n8, err := m.KvInsertReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.KvDeleteReq != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvDeleteReq.Size()))
		n9, err := m.KvDeleteReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.KvUpdateReq != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvUpdateReq.Size()))
		n10, err := m.KvUpdateReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.KvReplaceReq != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvReplaceReq.Size()))
		n11, err := m.KvReplaceReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.KvBatchInsertReq != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvBatchInsertReq.Size()))
		n12, err := m.KvBatchInsertReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CmdType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.CmdType))
	}
	if m.KvRawGetResp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvRawGetResp.Size()))
		n13, err := m.KvRawGetResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.KvRawPutResp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvRawPutResp.Size()))
		n14, err := m.KvRawPutResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.KvRawDeleteResp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvRawDeleteResp.Size()))
		n15, err := m.KvRawDeleteResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.KvRawExecuteResp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvRawExecuteResp.Size()))
		n16, err := m.KvRawExecuteResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.KvSelectResp != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvSelectResp.Size()))
		n17, err := m.KvSelectResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.KvInsertResp != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvInsertResp.Size()))
		n18, err := m.KvInsertResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.KvDeleteResp != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvDeleteResp.Size()))
		n19, err := m.KvDeleteResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.KvUpdateResp != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvUpdateResp.Size()))
		n20, err := m.KvUpdateResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.KvReplaceResp != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvReplaceResp.Size()))
		n21, err := m.KvReplaceResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.KvBatchInsertResp != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvBatchInsertResp.Size()))
		n22, err := m.KvBatchInsertResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Error != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.Error.Size()))
		n23, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *SplitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SchId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.SchId))
	}
	if len(m.SplitKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(len(m.SplitKey)))
		i += copy(dAtA[i:], m.SplitKey)
	}
	if m.LeftRangeId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.LeftRangeId))
	}
	if m.RightRangeId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.RightRangeId))
	}
	return i, nil
}

func (m *SplitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LeftRange != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.LeftRange.Size()))
		n24, err := m.LeftRange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.RightRange != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.RightRange.Size()))
		n25, err := m.RightRange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *MergeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MergeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DestroyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestroyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SchId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.SchId))
	}
	return i, nil
}

func (m *DestroyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestroyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CmdType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.CmdType))
	}
	if m.SplitReq != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.SplitReq.Size()))
		n26, err := m.SplitReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.MergeReq != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.MergeReq.Size()))
		n27, err := m.MergeReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *AdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CmdType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.CmdType))
	}
	if m.SplitResp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.SplitResp.Size()))
		n28, err := m.SplitResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.MergeResp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.MergeResp.Size()))
		n29, err := m.MergeResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *RaftCmdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftCmdRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.Type))
	}
	if m.Request != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.Request.Size()))
		n30, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.AdminRequest != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.AdminRequest.Size()))
		n31, err := m.AdminRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *RaftCmdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftCmdResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.Type))
	}
	if m.Response != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.Response.Size()))
		n32, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.AdminResponse != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.AdminResponse.Size()))
		n33, err := m.AdminResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func encodeFixed64RaftCmdpb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32RaftCmdpb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRaftCmdpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KvPair) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.Timestamp))
	}
	if m.ApplyIndex != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.ApplyIndex))
	}
	return n
}

func (m *MVCCKVPair) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.IsDelete {
		n += 2
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	l = m.Timestamp.Size()
	n += 1 + l + sovRaftCmdpb(uint64(l))
	if m.ApplyIndex != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.ApplyIndex))
	}
	if m.ExpireAt != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.ExpireAt))
	}
	return n
}

func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.RangeEpoch != nil {
		l = m.RangeEpoch.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.CmdType != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.CmdType))
	}
	if m.KvRawGetReq != nil {
		l = m.KvRawGetReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvRawPutReq != nil {
		l = m.KvRawPutReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvRawDeleteReq != nil {
		l = m.KvRawDeleteReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvRawExecuteReq != nil {
		l = m.KvRawExecuteReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvSelectReq != nil {
		l = m.KvSelectReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvInsertReq != nil {
		l = m.KvInsertReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvDeleteReq != nil {
		l = m.KvDeleteReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvUpdateReq != nil {
		l = m.KvUpdateReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvReplaceReq != nil {
		l = m.KvReplaceReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvBatchInsertReq != nil {
		l = m.KvBatchInsertReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.CmdType != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.CmdType))
	}
	if m.KvRawGetResp != nil {
		l = m.KvRawGetResp.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvRawPutResp != nil {
		l = m.KvRawPutResp.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvRawDeleteResp != nil {
		l = m.KvRawDeleteResp.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvRawExecuteResp != nil {
		l = m.KvRawExecuteResp.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvSelectResp != nil {
		l = m.KvSelectResp.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvInsertResp != nil {
		l = m.KvInsertResp.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvDeleteResp != nil {
		l = m.KvDeleteResp.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvUpdateResp != nil {
		l = m.KvUpdateResp.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvReplaceResp != nil {
		l = m.KvReplaceResp.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvBatchInsertResp != nil {
		l = m.KvBatchInsertResp.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	return n
}

func (m *SplitRequest) Size() (n int) {
	var l int
	_ = l
	if m.SchId != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.SchId))
	}
	l = len(m.SplitKey)
	if l > 0 {
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.LeftRangeId != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.LeftRangeId))
	}
	if m.RightRangeId != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.RightRangeId))
	}
	return n
}

func (m *SplitResponse) Size() (n int) {
	var l int
	_ = l
	if m.LeftRange != nil {
		l = m.LeftRange.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.RightRange != nil {
		l = m.RightRange.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	return n
}

func (m *MergeRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MergeResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DestroyRequest) Size() (n int) {
	var l int
	_ = l
	if m.SchId != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.SchId))
	}
	return n
}

func (m *DestroyResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AdminRequest) Size() (n int) {
	var l int
	_ = l
	if m.CmdType != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.CmdType))
	}
	if m.SplitReq != nil {
		l = m.SplitReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.MergeReq != nil {
		l = m.MergeReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	return n
}

func (m *AdminResponse) Size() (n int) {
	var l int
	_ = l
	if m.CmdType != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.CmdType))
	}
	if m.SplitResp != nil {
		l = m.SplitResp.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.MergeResp != nil {
		l = m.MergeResp.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	return n
}

func (m *RaftCmdRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.Type))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.AdminRequest != nil {
		l = m.AdminRequest.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	return n
}

func (m *RaftCmdResponse) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.Type))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.AdminResponse != nil {
		l = m.AdminResponse.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	return n
}

func sovRaftCmdpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaftCmdpb(x uint64) (n int) {
	return sovRaftCmdpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KvPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KvPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KvPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyIndex", wireType)
			}
			m.ApplyIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MVCCKVPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MVCCKVPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MVCCKVPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDelete = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyIndex", wireType)
			}
			m.ApplyIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RangeEpoch == nil {
				m.RangeEpoch = &metapb.RangeEpoch{}
			}
			if err := m.RangeEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= (CmdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvRawGetReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvRawGetReq == nil {
				m.KvRawGetReq = &kvrpcpb.KvRawGetRequest{}
			}
			if err := m.KvRawGetReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvRawPutReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvRawPutReq == nil {
				m.KvRawPutReq = &kvrpcpb.KvRawPutRequest{}
			}
			if err := m.KvRawPutReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvRawDeleteReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvRawDeleteReq == nil {
				m.KvRawDeleteReq = &kvrpcpb.KvRawDeleteRequest{}
			}
			if err := m.KvRawDeleteReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvRawExecuteReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvRawExecuteReq == nil {
				m.KvRawExecuteReq = &kvrpcpb.KvRawExecuteRequest{}
			}
			if err := m.KvRawExecuteReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvSelectReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvSelectReq == nil {
				m.KvSelectReq = &kvrpcpb.KvSelectRequest{}
			}
			if err := m.KvSelectReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvInsertReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvInsertReq == nil {
				m.KvInsertReq = &kvrpcpb.KvInsertRequest{}
			}
			if err := m.KvInsertReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvDeleteReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvDeleteReq == nil {
				m.KvDeleteReq = &kvrpcpb.KvDeleteRequest{}
			}
			if err := m.KvDeleteReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvUpdateReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvUpdateReq == nil {
				m.KvUpdateReq = &kvrpcpb.KvUpdateRequest{}
			}
			if err := m.KvUpdateReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvReplaceReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvReplaceReq == nil {
				m.KvReplaceReq = &kvrpcpb.KvReplaceRequest{}
			}
			if err := m.KvReplaceReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvBatchInsertReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvBatchInsertReq == nil {
				m.KvBatchInsertReq = &kvrpcpb.KvBatchInsertRequest{}
			}
			if err := m.KvBatchInsertReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= (CmdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvRawGetResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvRawGetResp == nil {
				m.KvRawGetResp = &kvrpcpb.KvRawGetResponse{}
			}
			if err := m.KvRawGetResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvRawPutResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvRawPutResp == nil {
				m.KvRawPutResp = &kvrpcpb.KvRawPutResponse{}
			}
			if err := m.KvRawPutResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvRawDeleteResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvRawDeleteResp == nil {
				m.KvRawDeleteResp = &kvrpcpb.KvRawDeleteResponse{}
			}
			if err := m.KvRawDeleteResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvRawExecuteResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvRawExecuteResp == nil {
				m.KvRawExecuteResp = &kvrpcpb.KvRawExecuteResponse{}
			}
			if err := m.KvRawExecuteResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvSelectResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvSelectResp == nil {
				m.KvSelectResp = &kvrpcpb.KvSelectResponse{}
			}
			if err := m.KvSelectResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvInsertResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvInsertResp == nil {
				m.KvInsertResp = &kvrpcpb.KvInsertResponse{}
			}
			if err := m.KvInsertResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvDeleteResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvDeleteResp == nil {
				m.KvDeleteResp = &kvrpcpb.KvDeleteResponse{}
			}
			if err := m.KvDeleteResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvUpdateResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvUpdateResp == nil {
				m.KvUpdateResp = &kvrpcpb.KvUpdateResponse{}
			}
			if err := m.KvUpdateResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvReplaceResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvReplaceResp == nil {
				m.KvReplaceResp = &kvrpcpb.KvReplaceResponse{}
			}
			if err := m.KvReplaceResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvBatchInsertResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvBatchInsertResp == nil {
				m.KvBatchInsertResp = &kvrpcpb.KvBatchInsertResponse{}
			}
			if err := m.KvBatchInsertResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &errorpb.Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchId", wireType)
			}
			m.SchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitKey = append(m.SplitKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SplitKey == nil {
				m.SplitKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftRangeId", wireType)
			}
			m.LeftRangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftRangeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightRangeId", wireType)
			}
			m.RightRangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightRangeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeftRange == nil {
				m.LeftRange = &metapb.Range{}
			}
			if err := m.LeftRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RightRange == nil {
				m.RightRange = &metapb.Range{}
			}
			if err := m.RightRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MergeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MergeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DestroyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestroyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestroyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchId", wireType)
			}
			m.SchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DestroyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestroyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestroyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= (AdminCmdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SplitReq == nil {
				m.SplitReq = &SplitRequest{}
			}
			if err := m.SplitReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergeReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MergeReq == nil {
				m.MergeReq = &MergeRequest{}
			}
			if err := m.MergeReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= (AdminCmdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SplitResp == nil {
				m.SplitResp = &SplitResponse{}
			}
			if err := m.SplitResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergeResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MergeResp == nil {
				m.MergeResp = &MergeResponse{}
			}
			if err := m.MergeResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftCmdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftCmdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftCmdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &Request{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminRequest == nil {
				m.AdminRequest = &AdminRequest{}
			}
			if err := m.AdminRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftCmdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftCmdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftCmdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &Response{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminResponse == nil {
				m.AdminResponse = &AdminResponse{}
			}
			if err := m.AdminResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftCmdpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRaftCmdpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaftCmdpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaftCmdpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaftCmdpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftCmdpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raft_cmdpb.proto", fileDescriptorRaftCmdpb) }

var fileDescriptorRaftCmdpb = []byte{
	// 1223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0x5e, 0xef, 0xe6, 0xf7, 0xd8, 0x4e, 0xdc, 0xe9, 0x22, 0xb2, 0xfd, 0x09, 0x95, 0x55, 0x89,
	0xd5, 0x02, 0x01, 0x6d, 0xd5, 0xaa, 0x17, 0x54, 0xb4, 0xfb, 0x03, 0x8a, 0x96, 0x8a, 0x95, 0x5b,
	0x7a, 0x6b, 0x79, 0xe3, 0xd9, 0x6c, 0xe4, 0x38, 0x71, 0x3d, 0x4e, 0xba, 0x79, 0x01, 0xae, 0xb8,
	0x46, 0x48, 0x3c, 0x02, 0x57, 0x70, 0xc5, 0x23, 0xec, 0x25, 0x4f, 0x80, 0xd0, 0xf2, 0x22, 0x68,
	0x66, 0xce, 0xd8, 0xe3, 0x24, 0x8b, 0x80, 0xab, 0xcc, 0x7c, 0x33, 0xdf, 0x37, 0x67, 0xce, 0xf9,
	0x3c, 0x47, 0x01, 0x27, 0x0d, 0xce, 0x33, 0x7f, 0x10, 0x87, 0xc9, 0x59, 0x2f, 0x49, 0xa7, 0xd9,
	0x94, 0x40, 0x81, 0xdc, 0xb1, 0x62, 0x9a, 0x05, 0x6a, 0xe5, 0x8e, 0x1d, 0xcd, 0xd3, 0x64, 0x90,
	0x4f, 0xdb, 0xd9, 0x28, 0xa6, 0x2c, 0x0b, 0xe2, 0x44, 0xad, 0xd3, 0x34, 0x9d, 0xa6, 0xf9, 0xfa,
	0xf6, 0x70, 0x3a, 0x9c, 0x8a, 0xe1, 0xa7, 0x7c, 0x24, 0x51, 0x77, 0x02, 0xb5, 0x93, 0xf9, 0x69,
	0x30, 0x4a, 0x89, 0x03, 0x5b, 0x11, 0x5d, 0x74, 0x8c, 0x07, 0xc6, 0xae, 0xe5, 0xf1, 0x21, 0xd9,
	0x86, 0xea, 0x3c, 0x18, 0xcf, 0x68, 0x67, 0x53, 0x60, 0x72, 0x42, 0xee, 0x41, 0x33, 0x3f, 0xa9,
	0xb3, 0xf5, 0xc0, 0xd8, 0xad, 0x78, 0x05, 0x40, 0xba, 0x00, 0x41, 0x92, 0x8c, 0x17, 0xfd, 0x49,
	0x48, 0x2f, 0x3b, 0x15, 0xb1, 0xac, 0x21, 0xee, 0x95, 0x01, 0xf0, 0xf2, 0xcd, 0xe1, 0xe1, 0xc9,
	0x9b, 0x1b, 0x0e, 0xbd, 0x0b, 0xcd, 0x11, 0xf3, 0x43, 0x3a, 0xa6, 0x99, 0x3c, 0xb8, 0xe1, 0x35,
	0x46, 0xec, 0x48, 0xcc, 0x8b, 0x88, 0xb6, 0xf4, 0x88, 0x9e, 0xea, 0x11, 0xf1, 0x23, 0xcd, 0xfd,
	0xed, 0x5e, 0x91, 0x8d, 0xd7, 0x6a, 0x74, 0x50, 0xb9, 0xfa, 0xe3, 0x83, 0x8d, 0x9b, 0xa3, 0xad,
	0x2e, 0x47, 0xcb, 0x83, 0xa1, 0x97, 0xc9, 0x28, 0xa5, 0x7e, 0x90, 0x75, 0x6a, 0x0f, 0x8c, 0xdd,
	0x2d, 0xaf, 0x21, 0x81, 0x17, 0x99, 0xfb, 0x5d, 0x0d, 0xea, 0x1e, 0x7d, 0x3b, 0xa3, 0x2c, 0x23,
	0x8f, 0xc0, 0x4c, 0x83, 0xc9, 0x90, 0xfa, 0x34, 0x99, 0x0e, 0x2e, 0xc4, 0x7d, 0xcc, 0x7d, 0xd2,
	0xc3, 0x7a, 0x79, 0x7c, 0xe9, 0x98, 0xaf, 0x78, 0x90, 0xe6, 0x63, 0xd2, 0x83, 0xc6, 0x20, 0x0e,
	0xfd, 0x6c, 0x91, 0xc8, 0x9b, 0xb6, 0xf6, 0x6f, 0xf7, 0xb4, 0xfa, 0x1f, 0xc6, 0xe1, 0xeb, 0x45,
	0x42, 0xbd, 0xfa, 0x40, 0x0e, 0xc8, 0x33, 0x68, 0x45, 0x73, 0x3f, 0x0d, 0xde, 0xf9, 0x43, 0x9a,
	0xf9, 0x29, 0x7d, 0x2b, 0xd2, 0x60, 0xee, 0x77, 0x7a, 0xca, 0x09, 0x27, 0x73, 0x2f, 0x78, 0xf7,
	0x15, 0xcd, 0x30, 0x2c, 0xcf, 0x8c, 0x0a, 0x40, 0xa3, 0x27, 0x33, 0x49, 0xaf, 0xac, 0xa3, 0x9f,
	0xce, 0x96, 0xe8, 0x12, 0x20, 0x5f, 0xc2, 0x2d, 0xa4, 0xcb, 0xe2, 0x08, 0x85, 0xaa, 0x50, 0xb8,
	0x5b, 0x56, 0x90, 0xc5, 0x52, 0x22, 0xad, 0xa8, 0x84, 0x91, 0x3e, 0x10, 0xd4, 0xa1, 0x97, 0x74,
	0x30, 0x43, 0xa1, 0x9a, 0x10, 0xba, 0x57, 0x16, 0x3a, 0x96, 0x1b, 0x94, 0x52, 0x3b, 0x2a, 0x83,
	0xe4, 0x73, 0xb0, 0xa3, 0xb9, 0xcf, 0xe8, 0x98, 0x0e, 0xe4, 0x85, 0x1a, 0x2b, 0x17, 0x7a, 0x25,
	0x16, 0xb5, 0x0b, 0xe5, 0x00, 0xb2, 0x47, 0x13, 0x46, 0x53, 0xc9, 0x6e, 0xae, 0xb0, 0xfb, 0x62,
	0x51, 0x63, 0xe7, 0x00, 0xb2, 0xb5, 0x54, 0xc0, 0x0a, 0xbb, 0x9c, 0x07, 0x33, 0x2a, 0x00, 0x64,
	0xcf, 0x92, 0x30, 0x40, 0xb6, 0xb9, 0xc2, 0xfe, 0x56, 0x2c, 0x6a, 0xec, 0x1c, 0x20, 0x5f, 0xc8,
	0x4a, 0xd2, 0x64, 0x1c, 0x0c, 0x24, 0xdd, 0x12, 0xf4, 0x1d, 0x3d, 0x7d, 0x72, 0x55, 0xf1, 0xad,
	0x48, 0x43, 0xc8, 0xd7, 0x70, 0x3b, 0x9a, 0xfb, 0x67, 0x41, 0x36, 0xb8, 0xd0, 0x13, 0x60, 0x0b,
	0x95, 0xfb, 0x9a, 0xca, 0x01, 0xdf, 0x52, 0xce, 0x82, 0x13, 0x2d, 0xa1, 0xee, 0x0f, 0x35, 0x68,
	0x78, 0x94, 0x25, 0xd3, 0x09, 0xa3, 0x25, 0x53, 0x1b, 0xff, 0xc2, 0xd4, 0xcf, 0xa1, 0x5d, 0x32,
	0x35, 0x4b, 0xc4, 0xb7, 0xb0, 0x74, 0x19, 0x34, 0xb1, 0x3c, 0x43, 0x5c, 0x26, 0x47, 0x34, 0x05,
	0xe9, 0x6b, 0x96, 0xe0, 0x77, 0xb1, 0xb3, 0xc6, 0xd8, 0x25, 0x05, 0x44, 0x34, 0x4b, 0xe6, 0xf5,
	0x64, 0xea, 0x25, 0xb9, 0xb7, 0xde, 0xdb, 0xa8, 0xd3, 0x8e, 0xca, 0x20, 0x66, 0xb6, 0xec, 0x6e,
	0x96, 0xe0, 0x77, 0x72, 0xff, 0x06, 0x7b, 0xa3, 0x98, 0x13, 0x2d, 0xa1, 0x58, 0xe8, 0xdc, 0xe0,
	0x2c, 0x41, 0x87, 0xef, 0xac, 0x71, 0x78, 0x71, 0xb3, 0x02, 0x41, 0x81, 0xbc, 0xc4, 0x2c, 0x41,
	0x93, 0xef, 0xac, 0x31, 0x79, 0x21, 0x50, 0x20, 0x28, 0xa0, 0xa7, 0x05, 0x56, 0x04, 0x96, 0x72,
	0x62, 0x45, 0x1a, 0x82, 0x02, 0xb9, 0xd3, 0x59, 0x82, 0x56, 0xdf, 0x59, 0x63, 0xf5, 0x42, 0xa0,
	0x40, 0xc8, 0x81, 0x2c, 0x6f, 0x6e, 0x76, 0x96, 0xa0, 0xdb, 0xef, 0xac, 0x73, 0x3b, 0x4a, 0xd8,
	0x91, 0x0e, 0x91, 0x6f, 0x60, 0x7b, 0xd5, 0xef, 0x2c, 0x41, 0xc3, 0x77, 0x6f, 0x32, 0x3c, 0x8a,
	0xdd, 0x8a, 0x96, 0x61, 0xf2, 0x10, 0xaa, 0xa2, 0xbb, 0x76, 0xda, 0x42, 0xa1, 0xd5, 0x53, 0xbd,
	0xf6, 0x98, 0xff, 0x7a, 0x72, 0xd1, 0xfd, 0xde, 0x00, 0xeb, 0x55, 0x32, 0x1e, 0xa9, 0x6f, 0x87,
	0xbc, 0x07, 0x35, 0xc6, 0x43, 0x08, 0xc5, 0xa7, 0x51, 0xf1, 0xaa, 0x6c, 0x70, 0xd1, 0x0f, 0x79,
	0x9b, 0x61, 0x7c, 0x9b, 0xcf, 0x7b, 0xa1, 0x6c, 0xb6, 0x0d, 0x01, 0x9c, 0xd0, 0x05, 0x71, 0xc1,
	0x1e, 0xd3, 0xf3, 0xcc, 0x97, 0xfd, 0x65, 0x14, 0x62, 0xcf, 0x35, 0x39, 0x28, 0x1a, 0x4b, 0x3f,
	0x24, 0x0f, 0xa1, 0x95, 0x8e, 0x86, 0x17, 0xda, 0x26, 0xd9, 0x79, 0x2d, 0x81, 0xe2, 0x2e, 0x37,
	0x06, 0x1b, 0xa3, 0xc1, 0x6f, 0xf5, 0x63, 0x80, 0x42, 0x1a, 0x9b, 0x96, 0x5d, 0x6a, 0x5a, 0x5e,
	0x33, 0x3f, 0x86, 0xf4, 0xc0, 0xd4, 0x0e, 0xc1, 0xaf, 0x74, 0x69, 0x3b, 0x14, 0x07, 0xba, 0x2d,
	0xb0, 0x5e, 0xd2, 0x74, 0xa8, 0x9e, 0x20, 0xb7, 0x0d, 0x36, 0xce, 0xe5, 0xf1, 0xee, 0x87, 0xd0,
	0x3a, 0xa2, 0x2c, 0x4b, 0xa7, 0x8b, 0x7f, 0xce, 0x8f, 0x7b, 0x0b, 0xda, 0xf9, 0x46, 0xe4, 0xfe,
	0x62, 0x80, 0xf5, 0x22, 0x8c, 0x47, 0x93, 0xa2, 0x03, 0x2f, 0xbf, 0x3b, 0x1d, 0xfd, 0xdd, 0x11,
	0x7b, 0x57, 0x1e, 0x9f, 0xc7, 0x2a, 0xf1, 0xfc, 0xf5, 0xdb, 0xc4, 0x27, 0x58, 0x63, 0xe9, 0xc5,
	0xc3, 0x92, 0xf0, 0xe7, 0xf3, 0x31, 0x34, 0x63, 0x7e, 0x93, 0x52, 0x0f, 0xd6, 0x68, 0xfa, 0xb5,
	0xbd, 0x46, 0x8c, 0x33, 0xf7, 0x37, 0x03, 0x6c, 0x8c, 0x19, 0x0b, 0xf0, 0xbf, 0x82, 0x7e, 0x0a,
	0xa0, 0x82, 0xd6, 0x1e, 0xcb, 0xd5, 0xa8, 0xd1, 0xbd, 0x4d, 0xa6, 0xa6, 0x9c, 0xa9, 0xe2, 0xd6,
	0x1e, 0xc9, 0xd5, 0xc0, 0x15, 0x33, 0x56, 0x53, 0xf7, 0x67, 0x03, 0x5a, 0x5e, 0x70, 0x9e, 0x1d,
	0xc6, 0xa1, 0x4a, 0xf8, 0x47, 0x50, 0xd1, 0xe2, 0x7e, 0xbf, 0x2c, 0xc3, 0x58, 0x30, 0xa4, 0x22,
	0x6c, 0xb1, 0x89, 0x7c, 0x02, 0xf5, 0x54, 0xf2, 0x30, 0xe0, 0x52, 0x53, 0x50, 0xa9, 0x52, 0x7b,
	0xc8, 0x33, 0xb0, 0x03, 0x7e, 0x77, 0x5f, 0x91, 0xd6, 0x24, 0x59, 0xaf, 0xbe, 0x67, 0x05, 0xda,
	0xcc, 0xfd, 0xd5, 0x80, 0x76, 0x1e, 0x2d, 0xa6, 0xfa, 0x3f, 0x85, 0xfb, 0x19, 0x34, 0x52, 0x24,
	0x62, 0xbc, 0xdb, 0xe5, 0x78, 0x31, 0x43, 0xf9, 0x2e, 0xf2, 0x1c, 0x5a, 0x2a, 0x62, 0xe4, 0xad,
	0x49, 0x6f, 0xa9, 0xf8, 0x9e, 0x1d, 0xe8, 0xd3, 0xbd, 0x9f, 0x0c, 0xa8, 0x63, 0xad, 0x89, 0x09,
	0xf5, 0xfe, 0x64, 0x1e, 0x8c, 0x47, 0xa1, 0xb3, 0x41, 0x00, 0x6a, 0xb2, 0xdb, 0x39, 0x06, 0x8e,
	0x4f, 0x67, 0x99, 0xb3, 0x49, 0x6c, 0x68, 0xe6, 0xbd, 0xc7, 0xd9, 0x22, 0x2d, 0x80, 0xa2, 0x7b,
	0x38, 0x15, 0xbe, 0x55, 0x36, 0x02, 0xa7, 0xce, 0xc7, 0xf2, 0xf1, 0x72, 0x1a, 0x7c, 0x8c, 0x9c,
	0x26, 0x1f, 0xcb, 0x97, 0xd6, 0x01, 0x7e, 0x26, 0x3e, 0x99, 0x8e, 0x49, 0xda, 0x60, 0x6a, 0x4f,
	0x9e, 0x63, 0xed, 0x3d, 0xc1, 0xcf, 0x4d, 0x45, 0xe8, 0x80, 0x85, 0x11, 0x0a, 0xd8, 0xd9, 0x20,
	0x4d, 0xa8, 0x0a, 0xe3, 0x39, 0x06, 0x1f, 0x0a, 0x27, 0x39, 0x9b, 0x7b, 0x4f, 0xc0, 0xd4, 0xd2,
	0x4b, 0x08, 0xb4, 0x90, 0x86, 0xa8, 0xb3, 0x41, 0x1a, 0x50, 0x39, 0x0a, 0xb2, 0x40, 0xf2, 0xa4,
	0xda, 0xe6, 0x81, 0x73, 0x75, 0xdd, 0x35, 0x7e, 0xbf, 0xee, 0x1a, 0x7f, 0x5e, 0x77, 0x8d, 0x1f,
	0xff, 0xea, 0x6e, 0x9c, 0xd5, 0xc4, 0x1f, 0x96, 0x47, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xb3,
	0x20, 0x92, 0x5f, 0x23, 0x0d, 0x00, 0x00,
}
